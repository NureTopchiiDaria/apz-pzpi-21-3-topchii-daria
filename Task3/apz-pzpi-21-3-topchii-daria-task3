1 ОПИС АРХІТЕКТУРИ СИСТЕМИ
1.1 Опис обраних технологій

Для розробки сканеру відбитку пальців з датчиком температури було обрано технологію ESP32. Для симуляції роботи пристрою було обрано веб-сервіс Wokwi.
ESP32 зазвичай використовується для створення малих, потужних мікроконтролерів, і його можна використовувати для розгортання та запуску вбудованих систем. Він має двоядерний процесор, вбудовані Wi-Fi та Bluetooth, що робить його потужним інструментом для різних проектів, від простих датчиків до складних IoT систем. ESP32 підтримує програмування на мовах C та C++, а також інших мовах, завдяки сумісності з Arduino IDE. Це значно спрощує процес розробки, дозволяючи використовувати знайомий інтерфейс і бібліотеки Arduino для роботи з ESP32. Проекти на ESP32 можна розробляти і запускати на різних операційних системах, таких як Windows, macOS та Linux. Окрім стандартних бібліотек Arduino, ESP32 має додаткові бібліотеки, які дозволяють використовувати його унікальні можливості, такі як робота з Wi-Fi та Bluetooth. Таким чином, ESP32 є потужним і гнучким інструментом для розробки вбудованих систем, який підтримує програмування на мовах C та C++ і сумісний з Arduino IDE.
1.2 Структура компонентів

Програмне забезпечення браслета на базі ESP32 складається з однієї основної частини, яка відповідає за формування даних та їх відправку до серверної частини. Дані збираються у форматі JSON і передаються на сервер. Пристрій отримує інформацію про місцезнаходження та пульс користувача за допомогою підключених до ESP32 сенсора пульсу та GPS датчика.
Оскільки проєкт базується на ESP32, він включає два ключових методи. Метод setup(), який виконується під час запуску пристрою та встановлює з’єднання з Інтернет мережею. Метод loop(), який виконується постійно, зчитує дані з сенсора пульсу та GPS датчика, а також відправляє ці дані до серверної частини проєкту.

2 ОПИС ІНЖЕНЕРНИХ РІШЕНЬ
2.1 Формування запитів

Програмне забезпечення для мого браслета на базі ESP32 є важливою частиною складної системи. Застосунок самостійно зчитує дані з сенсора пульсу та GPS датчика та відправляє їх на сервер. Серверній частині пристрій надсилає сформовані запити з інформацією про пульс і місцезнаходження користувача. Тіло запиту містить пульс, координати місцезнаходження (широта і довгота) та час. URI серверної частини міститься в програмному коді як змінна. Обмін інформацією реалізовано за допомогою HttpClient, який приймає базову адресу сервера:
 snprintf(post_data, sizeof(post_data), "{\"latitude\":%f,\"longitude\":%f,\"pulse\":%d}", latitude, longitude, pulse);

        esp_http_client_config_t config = {
            .url = SERVER_URL,
            .method = HTTP_METHOD_POST,
        };
        esp_http_client_handle_t client = esp_http_client_init(&config);

        esp_http_client_set_header(client, "Content-Type", "application/json");
        esp_http_client_set_post_field(client, post_data, strlen(post_data));

2.2 Адміністрування пристрою

Налаштування програмного забезпечення, а саме встановлення даних інтернет мережі та URL серверної частини, відбувається в програмному коді (див. додаток А). 

2.3 Локалізація	
     
Програмне забезпечення не виводить інформацію для користувача, а лише відправляє запити до серверної частини. Час вимірювання записується разом із GPS даними, що спрощує його подальше використання та конвертацію. Для отримання поточного часу використовується інформація з GPS датчика, після чого час автоматично включається до GPS даних у форматі YYYY-MM-DD HH:MM:SS, що відповідає типу змінної datetime в базі даних Microsoft SQL. Це забезпечує зручність у передачі та обробці даних, оскільки час уже інтегрований у відповідному форматі.     
 
Рисунок 3.2 – UML діаграма взаємодії

3.3 UML діаграма активності
На рисунку 3.1 зображено діаграму прецедентів для програмного забезпечення браслета. З пристроєм взаємодіє лише користувач системи, який надягає браслет для вимірювання пульсу та відстеження місцезнаходження.

На діаграмі активності відображено модель основних послідовностей бізнес-процесів, пов’язаних із програмним забезпеченням «розумного» пристрою в розроблюваній системі. Для зручності розуміння на діаграмі використано «доріжки» для представлення процесів.

 
Рисунок 3.3 – UML діаграма активності

3.4 UML діаграма пакетів

UML діаграму пакетів зображено на рисунку 3.3. ІоТ-пристрій має просту систему, яка складається з 4 елементів.
 
Рисунок 3.4 – UML діаграма пакетів
     
ВИСНОВКИ
У ході виконання лабораторної роботи набули навички розробки програмного забезпечення для IoT пристроїв як частини великої програмної системи.
Посилання на репозиторій з програмним кодом: https://github.com/NureTopchiiDaria/apz-pzpi-21-3-topchii-daria/tree/main/Task3 
Посилання на відео з демонстрацією роботи застосунку: https://youtu.be/6-3rRnhfRgg

ДОДАТОК А
Код програми

1	#include <stdio.h>
2	#include <string.h>
3	#include "freertos/FreeRTOS.h"
4	#include "freertos/task.h"
5	#include "freertos/event_groups.h"
6	#include "esp_system.h"
7	#include "esp_wifi.h"
8	#include "esp_event.h"
9	#include "nvs_flash.h"
10	#include "esp_log.h"
11	#include "esp_http_client.h"
12	#include <inttypes.h>
13	#define WIFI_SSID "EWV-WLAN"
14	#define WIFI_PASS "Wlan4Ewv2018!"
15	#define SERVER_URL "http://192.168.100.227:5000/data"
16	static EventGroupHandle_t s_wifi_event_group;
17	#define WIFI_CONNECTED_BIT BIT0
18	#define WIFI_FAIL_BIT      BIT1
19	static const char *TAG = "wifi station";
20	static int s_retry_num = 0;
21	static const int MAX_RETRY = 10;
22	static void event_handler(void* arg, esp_event_base_t event_base, int32_t event_id, void* event_data)
23	{
24	if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {
25	esp_wifi_connect();
26	ESP_LOGI(TAG, "WiFi started, attempting to connect...");
27	} else if (event_base == WIFI_EVENT && event_id ==
28	28WIFI_EVENT_STA_DISCONNECTED) {
29	if (s_retry_num < MAX_RETRY) {
30	 esp_wifi_connect();
31	s_retry_num++;
ESP_LOGI(TAG, "Retrying to connect to the AP, attempt %d", s_retry_num);
32	} else {
a.	xEventGroupSetBits(s_wifi_event_group, WIFI_FAIL_BIT);
i.	ESP_LOGE(TAG, "Failed to connect to the AP after %d attempts", s_retry_num);
33	}
34	} else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
35	ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;
36	ESP_LOGI(TAG, "Got IP: %s", ip4addr_ntoa(&event->ip_info.ip));
37	s_retry_num = 0;
38	xEventGroupSetBits(s_wifi_event_group, WIFI_CONNECTED_BIT);
39	}
40	}-------------------
41	void wifi_init_sta(void)
42	{
43	s_wifi_event_group = xEventGroupCreate();

44	ESP_ERROR_CHECK(esp_netif_init());

45	ESP_ERROR_CHECK(esp_event_loop_create_default());
46	esp_netif_create_default_wifi_sta();

47	wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
48	ESP_ERROR_CHECK(esp_wifi_init(&cfg));

49	esp_event_handler_instance_t instance_any_id;
50	esp_event_handler_instance_t instance_got_ip;
i.	ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &event_handler, NULL, &instance_any_id));
ii.	ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &event_handler, NULL, &instance_got_ip));

51	wifi_config_t wifi_config = {
52	.sta = {
a.	.ssid = WIFI_SSID,
b.	.password = WIFI_PASS,
53	},
54	};
55	ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
56	ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config));
57	ESP_ERROR_CHECK(esp_wifi_start());

58	ESP_LOGI(TAG, "WiFi initialization finished.");

59	EventBits_t bits = xEventGroupWaitBits(s_wifi_event_group,
a.	WIFI_CONNECTED_BIT | WIFI_FAIL_BIT,
b.	pdFALSE,
c.	pdFALSE,
d.	portMAX_DELAY);

60	if (bits & WIFI_CONNECTED_BIT) {
a.	ESP_LOGI(TAG, "Connected to AP SSID:%s, password:%s", WIFI_SSID, WIFI_PASS);
61	} else if (bits & WIFI_FAIL_BIT) {
a.	ESP_LOGI(TAG, "Failed to connect to SSID:%s, password:%s", WIFI_SSID, WIFI_PASS);
62	} else {
63	ESP_LOGE(TAG, "Unexpected event");
64	}

i.	ESP_ERROR_CHECK(esp_event_handler_instance_unregister(IP_EVENT, IP_EVENT_STA_GOT_IP, instance_got_ip));
b.	ESP_ERROR_CHECK(esp_event_handler_instance_unregister(WIFI_EVENT, ESP_EVENT_ANY_ID, instance_any_id));
65	vEventGroupDelete(s_wifi_event_group);
66	}

67	void http_post_task(void *pvParameters)
68	{
69	while (1) {
70	// Simulated data
71	float latitude = 40.712776;
72	float longitude = -74.005974;
73	int pulse = 75;
74	char post_data[128];
75	snprintf(post_data,sizeof(post_data),"{\"latitude\":%f,\"longitude\":%f,\
76	72pulse\":%d}", latitude, longitude, pulse);
77	esp_http_client_config_t config = {.url = SERVER_URL,.method = HTTP_METHOD_POST,
78	};
79	esp_http_client_handle_t client = esp_http_client_init(&config);
80	esp_http_client_set_header(client, "Content-Type", "application/json");
81	esp_http_client_set_post_field(client, post_data, strlen(post_data));
82	ESP_LOGI(TAG, "Sending HTTP POST request...");
83	esp_err_t err = esp_http_client_perform(client);
84	if (err == ESP_OK) {
ESP_LOGI(TAG, "HTTP POST Status = %d, content_length = %" PRId64,
i.	esp_http_client_get_status_code(client),
ii.	esp_http_client_get_content_length(client));
85	} else { ESP_LOGE(TAG, "HTTP POST request failed: %s", esp_err_to_name(err));
86	}

87	esp_http_client_cleanup(client);
88	vTaskDelay(6000 / portTICK_PERIOD_MS); // Send every 6 sec
89	}
90	}
91	void app_main(void)
92	{
93	ESP_ERROR_CHECK(nvs_flash_init());
94	wifi_init_sta();
95	xTaskCreate(&http_post_task, "http_post_task", 8192, NULL, 5, NULL);
96	}
