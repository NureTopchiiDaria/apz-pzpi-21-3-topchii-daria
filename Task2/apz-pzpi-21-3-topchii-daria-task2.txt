1.	ОПИС АРХІТЕКТУРНИ СИСТЕМИ
1.1	Опис архітектури серверної частини
Для створення проєкту було обрано багаторівневу архітектуру, що включає рівні доступа до даних, бізнес-логіки та презентаційний рівень.
Рівень DAL містить інформацію про моделі бази даних та логіку отримання даних з використанням патерну репозиторій.
Рівень BLL містить інформацію про сервіси та бізнес-логіку.
Рівень API містить контролери, які звертаються до сервісів для виконання бізнес логіки і отримання інформації.
Система розроблена відповідно до архітектурного стилю клієнт-сервер та використовує принципи REST API для реалізації віддаленого інтерфейсу.
1.2	Структура бази даних
База даних містить 4 сутності: Користувач, Кімната, Користувач в кімнаті, Шлях. Сутності пов’язані між собою зв’язками один-до-багатьох та один-до-одного.
Створимо ER-модель даних (рис. 1.2.1).
 
Рисунок 1.2.1 – ER-діаграма даних
2.	ОПИС АРХІТЕКТУРНИ СИСТЕМИ
2.1	Робота з базою даних
Для роботи з базою даних було обрано СУБД MS SSMS, яка використовує реляційну базу даних MS Sql Server. Ця база даних добре поєднується з C# та може бути легко розгорнута у сервісі Azure.
Для роботи з базою даних було обрано ORM фреймворк Entity Framework Core, так як він має підтримку для більш широкого спектру баз даних та може працювати як на Windows, так і на Linux або macOS.
Для створення бази даних було обрано метод Code First – всі таблиці були створені за моделями, описаними у програмі.
В коді міграції було додано автоматичний скрипт для додавання базових ролей(учень, вчитель, директор, охоронець, працівник) та надано відповідні права.
2.2	Специфікація REST API
Для обміну даними було обрано RESTful API — це архітектурний стиль інтерфейсу прикладної програми (API), який використовує запити HTTP для доступу та використання даних. Щоб реалізувати це, для кожної основної сутності програмної системи було створено окремий контролер, у якому прописані усі маршрути для взаємодії. Нище наведені прикладі цих маршрутів та їх призначення.
Таблиця 1 – Специфікація REST API
Посилання	Метод	Призначення
/api/Registration	POST	Реєстрація користувача
/api/Login	POST	Аутентифікація користувача
/api/Administration/{id}/approve	POST	Затвердження кімнати за її ідентифікатором
/api/Room	GET	Отримання всіх кімнат
/api/Room/{id}	GET	Отримання кімнати за її ідентифікатором
/api/Room	POST	Створення нової кімнати
/api/Room/{id}	DELETE	Видалення кімнати за її ідентифікатором
/api/Room	PUT	Оновлення інформації про кімнату
/api/User/{id}	GET	Отримання користувача за його ідентифікатором
/api/User	POST	Створення нового користувача
/api/User/{id}	DELETE	Видалення користувача за його ідентифікатором
/api/User/{id}	PUT	Оновлення висоти користувача за його ідентифікатором
/api/User/{id}/activate	PUT	Активація користувача за його ідентифікатором
/api/Backup	POST	Створення бекапу бази даних
2.3	Автентифікація
Для реалізації авторизації та автентифікації використовується JSON Web Token.
.public{ varvarvar{ SubjectExpirestokenHandlerkeytokenDescriptorstring= =Encoding.ASCII.GetBytes(this.appSettings.SecretKey);=GenerateJwt(UserModelnewDateTime.UtcNow.AddDays(this.appSettings.JwtExpirationTime),ClaimsIdentity(new[]= new==newnewJwtSecurityTokenHandler();SecurityTokenDescriptorSigningCredentials(newuser){ new Claim("id",SymmetricSecurityKey(key),user.Id.ToString()) }),
SecurityAlgorithms.HmacSha256Signature),}var; SigningCredentialsjwt = tokenHandler.CreateToken(tokenDescriptor); } return tokenHandler.WriteToken(jwt);
public{ if{} (returnjwtOptionalResult<Guid>is null)new OptionalResult<Guid>(false,ValidateJwt(string"Tokenjwt)is empty"); varvar tokenHandlerkey = Encoding.ASCII.GetBytes(this.appSettings.SecretKey);= new JwtSecurityTokenHandler();
try{ tokenHandler.ValidateToken(jwt,new{ ValidateIssuerSigningKeyIssuerSigningKeyValidateIssuerValidateAudienceClockSkewTokenValidationParameters= TimeSpan.Zero,= false,== newfalse,SymmetricSecurityKey(key),= true,
	}out,	SecurityToken validatedToken);
varvar jwtTokenuserId = Guid.Parse(jwtToken.Claims.First(x= (JwtSecurityToken)validatedToken;=> x.Type == "id").Value);
}catch{} returnreturn(Exceptionnewnew OptionalResult<Guid>(userId);OptionalResult<Guid>(false,ex)	ex.Message);
2.4	Валідація на сервері
Валідація даних реалізовано за допомогою атрибутів Entity Framework Core та ручною перевіркою даних. Наприклад, для перевірки даних при створені аккаунту використовуються атрибути для DTO-моделей.
12345678 MinLength.[public[[public[Required(ErrorMessageRequired(ErrorMessageEmailAddress(ErrorMessageRequired(ErrorMessage[MinLength(6,stringstringstringUserNameEmailPasswordErrorMessage{ get;{{set;===get;get;"Email"Username"Password}set;=set;="Invalid"Password}}is required.")]isisemailrequired.")]required.")]mustformat.")]be at least 6 characters long.")]
10119	public
121314 [[publicRequired(ErrorMessageCompare("Password",string RePasswordErrorMessage={ get;"Passwordset;}	=con irmation"Passwords dois required.")]not match.")]
2.5 Локалізація
Серверна частина локалізації пов’язана з коректною обробкою зросту користувача, що в базі даних зберігається в метрах, але з боку клентської частини може бути введена в футах, після чого переводиться у метри.
2.6 Використання механізму Dependency Injection
Для передачі залежностей використано механізм Dependency Injection (див.
додаток Ж). Приклад реалізації:
12345 private{services.AddScoped<IRoomService,services.AddScoped<IRoomPointsService,static void Con igureRoomServices(IServiceCollectionRoomService>();	services) 76	services.AddScoped<IUserRoomsService,services.AddScoped<IRoomApprovalService,}	UserRoomsService>();RoomPointsService>();RoomApprovalService>();
При використанні AddScoped створюється новий екземпляр сервісу для кожного HTTP-запиту, який після виконання запиту видаляється.
Це дозволяє легко змінити залежності в разі потреби, налаштовувати час життя залежності та облегшувати тестування й розуміння коду.
2.7 Забезпечення безпеки даних
Забезпечення безпеки даних у серверному застосунку включає:
-	хешування користувацьких паролів, збереження цих даних в базі даних у зашифрованому вигляді;
-	використання ORM фреймворку Entity Framework, який запобігає SQL
ін'єкції;
-	упроваджені аутентифікація і авторизація користувачів за токеном JWT
(JSON Web Token). Права доступу користувачів передаються до клієнтської частини застосунку, де вже буде надаватися лише відповідний функціонал. Кожен користувач має доступ лише до необхідної для його роботи інформації.
2.8 Адміністрування системи
Адміністратор системи має права на підтвердження створення нових подорожей, а також створення бекапу бази даних.
3. UML ДІАГРАМИ СИСТЕМИ
3.1 UML діаграми прецедентів (Use Case Diagram)
Після визначення основних сутностей системи слід описати їх можливості. Для цього зобразимо діаграми прецедентів програмної системи для відзначення відвідувань(рис. 3.1.1).
Як бачимо з діаграми ми маємо користувача і адміністратора. Кожен з ним має свої права та обов’язки.
 
Рисунок 3.1.1 – Діаграма прецедентів
3.2 UML діаграма розгортання
Діаграма розгортання (Deployment Diagram) вказує на те, як фізичні компоненти системи розташовані та спілкуються один з одним(рис. 3.2.2).
Серверна частина розроблюється за допомогою ASP.NET API.
 
Рисунок 3.2.1 – Діаграма розгортання
3.3 Діаграма пакетів
Для масштабування програмної системи у майбутньому, а також можливості змінювати її в залежності від можливих потреб, було обрано використати трьох-рівневу архітектуру (3-tier architecture). Тож слід правильно визначити залежності між пакети. Для цього побудуємо діаграму пакетів (див. рис. 3.3.1).
 
Рисунок 3.3.1 – Діаграма пакетів
Ядром системи виступає DAL, який містить опис основних сутностей системи. Він не повинен залежати ні від кого. Далі йде рівень BLL, що буде містити основну логіку системи, інтерфейси, проміжні сутності і залежати він буде лише від DAL-у.
Третім рівнем архітектури є API, що звертається до рівня BLL для виконання запитів, що поступають від користувача.
3.4 ER-діаграма
На рисунку 1.2.1 було наведено ER-діаграму, в якій пов’язано 4 сутності, що реалізовані як таблиці бази даних.
Висновки
В результаті виконання даної лабораторної роботи було створену серверну частину для «Програмної системи для організації подорожей TravelSync». Описано прийняті інженерні рішення, розроблено діаграми, які ілюструють загальну архітектуру системи, будову її серверних компонентів та структуру бази даних.
Посилання на програмний код:
https://github.com/NureTopchiiDaria/apz-pzpi-21-3-topchii-daria/tree/main/task2 Посилання на відео-демонстрацію роботи застосунку:
https://youtu.be/pvATa8GUGS4 
Додаток А
Код програми
1	using System.Linq.Expressions;
2	using AutoMapper;
3	using BLL.Abstractions.Interfaces.UserInterfaces;
4	using Core.DataClasses;
5	using Core.DTOs;
6	using Core.Models.UserModels;
7	using DAL.Abstractions.Interfaces;
8
9	namespace BLL.Services.UserServices
10	{
11	internal class UserService : IUserService
12	{
13	private readonly IGenericStorageWorker<UserModel> storage;
14
	15	private readonly IHashingService hashingService;
16
17	public UserService(IGenericStorageWorker<UserModel> storage, IHashingService hashingService)
18	{
19	this.storage = storage;
20	this.hashingService = hashingService;
21	}
22
23	public	async	Task<IEnumerable<UserModel>>
GetByConditions(params Expression<Func<UserModel, bool>>[] conditions)
24	{
25	return await this.storage.GetByConditions(
26	conditions);
27	}
28
29	public	async	Task<IEnumerable<UserModel>>
GetActiveUsers(params	Expression<Func<UserModel,	bool>>[] additionalConditions)
30	{
31	additionalConditions = additionalConditions.Append(x => x.IsActive).ToArray();
32	return await this.GetByConditions(additionalConditions);
33	}
34
35	public async Task<UserModel> GetUserById(Guid id)
36	{
37	return	(await	this.GetByConditions(u	=>	u.Id	==
id)).FirstOrDefault();
38	}
39
40	public	async	Task<OptionalResult<UserModel>>
CreateNonActiveUser(UserCreateModel user)
41	{
42	if ((await this.GetByConditions(x => x.Email == user.Email)).Any())
43	{
44	return new OptionalResult<UserModel>(false, $"User with email
{user.Email} already exists");
45	}
46
47	var userModel = this.MapUserCreateModel(user);
48	await this.storage.Create(userModel);
49
50	return new OptionalResult<UserModel>(userModel);
51	}
52
53	public async Task<ExceptionalResult> Delete(Guid id)
54	{
55	var user = await this.GetUserById(id);
56	if (user is null)
57	{
58	return new ExceptionalResult(false, $"User with id {id} does not
exist");
59	}
60
	61	await this.storage.Delete(user);
62
63	return new ExceptionalResult();
64	}
65
66	public async Task<OptionalResult<UserModel>> ActivateUser(Guid
id)
67	{
68	var userData = new UserUpdateModel()
69	{
70	Id = id,
71	IsActive = true,
72	};
73
74	return await this.Update(userData, null);
75	}
76
77	public	async	Task<OptionalResult<UserModel>>
Update(UserUpdateModel user, UserHeightDTO userHeightDTO)
78	{
79	if (await this.GetUserById(user.Id) is null)
80	{
81	return new OptionalResult<UserModel>(false, $"User with id
{user.Id} does not exist");
82	}
83
84	// Check if height is speci ied in feet
85	if (userHeightDTO.IsInFeet)
86	{
87	loat	heightInMeters	=
this.ConvertFeetToMeters(userHeightDTO.Height);
88	user.Height = heightInMeters;
89	}
90
91	var userModel = await this.MapUserUpdateModel(user);
92	await this.storage.Update(userModel);
93
94	return new OptionalResult<UserModel>(userModel);
95	}
96
97	private	async	Task<UserModel>
MapUserUpdateModel(UserUpdateModel user)
98	{
99	var mapperCon ig = new MapperCon iguration(cfg =>
100	{
101	cfg.CreateMap<UserUpdateModel,
UserModel>(MemberList.Source).ForAllMembers(opt => opt.AllowNull());
 
102	});
103	var mapper = new Mapper(mapperCon ig);
104	var userObject = mapper.Map<UserModel>(user);
105	var changingUser = await this.GetUserById(user.Id);
106
107	foreach (var ield in userObject.GetType().GetProperties())
108	{
109	if ( ield.GetValue(userObject) is not null)
110	{
111	ield.SetValue(changingUser, ield.GetValue(userObject));
112	}
113	}
114
115	if (user.Password is not null)
116	{
117	changingUser.HashedPassword	=
 
this.hashingService.Hash(user.Password);
 
118	}
119
120	return changingUser;
121	}
122
123	private loat ConvertFeetToMeters( loat feet)
124	{
125	// Convert height from feet to meters
126	const loat feetToMetersConversionFactor = 0.3048f;
127	return feet * feetToMetersConversionFactor;
128	}
129
130	private UserModel MapUserCreateModel(UserCreateModel user)
131	{
132	var mapperCon iguration = new MapperCon iguration(cfg =>
cfg.CreateMap<UserCreateModel, UserModel>());
133	var mapper = new Mapper(mapperCon iguration);
134	var userObject = mapper.Map<UserModel>(user);
135	userObject.HashedPassword	=
this.hashingService.Hash(user.Password);
136	userObject.IsActive = false;
137
138	return userObject;
139	}
140141} }
